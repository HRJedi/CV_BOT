# This Python file uses the following encoding: utf-8


import requests
from bs4 import BeautifulSoup as soup
from urllib.request import urlopen as uReq
from database import con_db, que
from content import keys, cont

cv_hh = 'cv'
geo_token = 'token'


# –§–£–ù–ö–¶–ò–ò –ë–î
# –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def new_user_reg(message):

    if con_db.get_val(que.init_user_q,
                      (message.chat.id,))[0] == 0:
        uid = message.chat.id
        f_name = message.from_user.first_name
        l_name = message.from_user.last_name
        u_name = message.from_user.username
        con_db.set_val(que.new_user_q,
                       (uid,
                        f_name,
                        l_name,
                        u_name))
        con_db.set_val(que.set_about_q,
                       (uid,
                        cont.about_me))
    return


# –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç —é–∑–µ—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
def act_state_msg(message):
    state = con_db.get_val(que.get_state_q,
                           (message.chat.id,))
    return state[0]

# –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç —é–∑–µ—Ä–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞


def act_state_call(call):
    state = con_db.get_val(que.get_state_q,
                           (call.message.chat.id,))[0]
    return state


# –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤
def upd_facts_func(message):
    con_db.set_val(que.set_about_q,
                   (message.chat.id,
                    cont.about_me))
    con_db.set_val(que.new_log_q,
                   (message.chat.id,
                    '–û —Å–µ–±–µ',
                    'refresh_fact_list',
                    message.text))
    return


# –í—ã–¥–∞—á–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞
def r_fact_func(bot, message):
    bot.send_dice(message.chat.id,
                  'üé≤')
    res = con_db.get_val(que.get_r_fact_q,
                         (message.from_user.id,))[0].split(';')
    con_db.set_val(que.new_log_q,
                   (message.chat.id,
                    '–û —Å–µ–±–µ',
                    'send_random_fact',
                    message.text))
    bot.send_message(message.from_user.id,
                     res[0],
                     reply_markup=keys.r_fact_m2)

    if len(res[1]) > 2:
        bot.send_photo(message.chat.id,
                       open(r'/root/CV_BOT/pic/' + res[1], 'rb'))
    return


# –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
def get_geo(city_name):
    token = geo_token
    # –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º –≤ –µ–≤—Ä–∞–∑–∏–∏, –≤–µ—Ä–Ω—É—Ç—å json
    loc = requests.get(
        f'https://eu1.locationiq.com/v1/search?key={token}&q={city_name}&format=json&').json()
    return {'lat': loc[0]['lat'], 'lon': loc[0]['lon']}


# –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ + –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è
def get_cv():
    cv_link = cv_hh
    uClient = uReq(cv_link)
    page_html = uClient.read()
    uClient.close()

    page_soup = soup(page_html, features='html.parser')

    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
    container = page_soup.find_all(
        'div', {'class': 'resume-block__title-text-wrapper'})[0]
    cv_name = container.find('span', class_='resume-block__title-text').text

    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    container = page_soup.find_all('div', {
                                   'data-qa': 'resume-block-education'})[0]
    e_uni = container.find('div', class_='bloko-text bloko-text_strong').text
    e_dep = container.find(
        'div', {'data-qa': 'resume-block-education-organization'}).text.split(', ')[0]

    # –°—Ç–∞–∂
    container = page_soup.find_all('span', {
                                   'class': 'resume-block__title-text resume-block__title-text_sub'})[0]
    e_exp = container.text.replace('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã ', '')

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–û–±—â–∞—è)
    container = page_soup.find_all('div', {'class': 'resume-header-main'})[0]

    # –†–µ–ª–æ–∫ –∏ –∫–æ–º–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏
    temp_lst = []
    e_loc = container.find('div', {'class': 'resume-header-title'})
    for part in e_loc:
        if part is not None:
            temp_lst.append(part.text)
    temp_lst = temp_lst[-1]
    reloc = temp_lst.split(", ")[-2]
    r_trip = temp_lst.split(", ")[-1]

    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –≤ —Ä–µ–∑—é–º–µ
    e_photo = container.find('img', {'class': 'resume-media__image'})['src']

    # –ò–º—è
    e_name = container.find('h2', class_='bloko-header-1').text

    # –í–æ–∑—Ä–∞—Å—Ç
    e_age = container.find('span', {'data-qa': 'resume-personal-age'}).text

    # –ì–æ—Ä–æ–¥
    e_city = container.find('span', {'data-qa': 'resume-personal-address'}).text

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    temp_lst = []
    for part in container.find('div', class_='resume-header-field'):
        if part.find('a', class_='bloko-link') is not None:
            for elem in part:
                temp_lst.append(elem.text.split('\xa0'))
    tel_num = temp_lst[2][1]
    e_mail = temp_lst[3][0]
    tg_link = temp_lst[4][0]

    atr_list = {'–Ω–∞–∑–≤–∞–Ω–∏–µ': cv_name, '—Ñ–æ—Ç–æ': e_photo, '—Ñ–∏–æ': e_name,
                '–≤–æ–∑—Ä–∞—Å—Ç': e_age, '—Å—Ç–∞–∂': e_exp, '–≥–æ—Ä–æ–¥': e_city,
                '—É–Ω–∏–≤–µ—Ä': e_uni, '–∫–∞—Ñ–µ–¥—Ä–∞': e_dep, '—Ä–µ–ª–æ–∫': reloc,
                '–∫–æ–º–∞–Ω–¥': r_trip, '—Ç–µ–ª–µ—Ñ–æ–Ω': tel_num, '–ø–æ—á—Ç–∞': e_mail,
                '—Å—Å—ã–ª–∫–∞': tg_link, '–∫–æ–æ—Ä–¥': get_geo(e_city)}

    return atr_list


def cv_message_set(bot, message):
    cv_dict = get_cv()
    bot.send_photo(message.chat.id,
                   cv_dict["—Ñ–æ—Ç–æ"])
    bot.send_message(message.from_user.id,
                     (f'üë§ - –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n'
                      f'{cv_dict["—Ñ–∏–æ"]}\n'
                      f'{cv_dict["–≤–æ–∑—Ä–∞—Å—Ç"]}\n\n'
                      f'üë®üèª‚Äçüíª - –ü–æ–∑–∏—Ü–∏—è: \n'
                      f'{cv_dict["–Ω–∞–∑–≤–∞–Ω–∏–µ"]}\n'
                      f'{cv_dict["—Å—Ç–∞–∂"]}\n\n'
                      f'üéì - –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:\n'
                      f'{cv_dict["—É–Ω–∏–≤–µ—Ä"]}\n'
                      f'{cv_dict["–∫–∞—Ñ–µ–¥—Ä–∞"]}\n\n'
                      f'üìç - –õ–æ–∫–∞—Ü–∏—è:\n'
                      f'{cv_dict["–≥–æ—Ä–æ–¥"]}\n'
                      f'{cv_dict["—Ä–µ–ª–æ–∫"]}\n'
                      f'{cv_dict["–∫–æ–º–∞–Ω–¥"]}'),
                     reply_markup=keys.about_m)

    bot.send_contact(message.chat.id,
                     cv_dict['—Ç–µ–ª–µ—Ñ–æ–Ω'],
                     cv_dict['—Ñ–∏–æ'].split(' ')[1],
                     cv_dict['—Ñ–∏–æ'].split(' ')[0])

    bot.send_location(message.chat.id,
                      longitude=cv_dict['–∫–æ–æ—Ä–¥']['lon'],
                      latitude=cv_dict['–∫–æ–æ—Ä–¥']['lat'],
                      horizontal_accuracy=1000)
    return
