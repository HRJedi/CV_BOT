# This Python file uses the following encoding: utf-8

import telebot
from database import con_db, que
from mod import mod
from content import keys, cont


# –ü–µ—Ä—Å. –¥–∞–Ω–Ω—ã–µ
token = "token"
forward_to = 'user'

# –ë–æ—Ç
bot = telebot.TeleBot(token, num_threads=10)

# –í—ã–∑–æ–≤—ã –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
alert_list = ['discl_m', 'fwd_about', 'src_about']

# –û–±—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
return_list = ['‚Ü©Ô∏è –ö –Ω–∞—á–∞–ª—É', '‚Ü©Ô∏è –ö –∫–∞—Ä—å–µ—Ä–µ', '‚Ü©Ô∏è –ö –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã']


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init(message):
    mod.new_user_reg(message)
    start(message)

    return


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
def start(message):
    con_db.set_val(que.set_state_q,
                   (message.chat.id,
                    '–°—Ç–∞—Ä—Ç',
                    'ordinary',
                    message.text))
    bot.send_sticker(message.chat.id,
                     cont.sticker_my)
    bot.send_message(message.chat.id,
                     cont.start_mesage,
                     reply_markup=keys.start_m)

    return


# –†–ê–ó–î–ï–õ–´
#
# –†–∞–∑–¥–µ–ª –æ –∫–∞—Ä—å–µ—Ä–µ
@bot.callback_query_handler(func=lambda call:
                            call.data == 'career_m')
def career_m(call):
    con_db.set_val(que.set_state_q,
                   (call.message.chat.id,
                    '–û –∫–∞—Ä—å–µ—Ä–µ',
                    'ordinary',
                    'NULL'))
    bot.send_message(call.message.chat.id,
                     cont.career_text,
                     reply_markup=keys.career_m)

    return


# –†–∞–∑–¥–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@bot.callback_query_handler(func=lambda call:
                            call.data == 'cont_m')
def cont_m(call):
    con_db.set_val(que.new_log_q,
                   (call.message.chat.id,
                    '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
                    'ordinary',
                    'NULL'))
    bot.send_message(call.message.chat.id,
                     cont.cont_text,
                     reply_markup=keys.cont_m_inl)
    bot.send_contact(call.message.chat.id,
                     '79050207805',
                     '–ö–∏—Ä–∏–ª–æ–≤',
                     '–ü–∞–≤–µ–ª',
                     reply_markup=keys.cont_m)

    return


# –†–∞–∑–¥–µ–ª –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.callback_query_handler(func=lambda call:
                            call.data == 'fwd_m')
def fwd_m(call):
    con_db.set_val(que.set_state_q,
                   (call.message.chat.id,
                    '–ü–µ—Ä–µ—Å—ã–ª–∫–∞',
                    'ordinary',
                    'NULL'))
    bot.send_message(call.message.chat.id,
                     cont.msg_text,
                     reply_markup=keys.fwd_m)

    return


# –†–∞–∑–¥–µ–ª –æ –±–æ—Ç–µ
@bot.callback_query_handler(func=lambda call:
                            call.data == 'about_bot')
def about_b(call):
    con_db.set_val(que.new_log_q,
                   (call.message.chat.id,
                    '–û –±–æ—Ç–µ',
                    'ordinary',
                    'NULL'))
    bot.send_message(call.message.chat.id,
                     cont.ab_bot_text,
                     reply_markup=keys.ab_bot_m)

    return


# –°–ö–í–û–ó–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
#
# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.callback_query_handler(func=lambda call:
                            call.data in alert_list)
def alerts(call):

    if call.data == 'discl_m':
        con_db.set_val(que.new_log_q,
                       (call.message.chat.id,
                        '–î–∏—Å–∫–ª–µ–π–º–µ—Ä',
                        'pop-up message',
                        'NULL'))
        bot.answer_callback_query(call.id,
                                  show_alert=True,
                                  text=cont.discl)

    elif call.data == 'fwd_about':
        con_db.set_val(que.new_log_q,
                       (call.message.chat.id,
                        '–°–ø—Ä–∞–≤–∫–∞: —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏',
                        'pop-up message',
                        'NULL'))
        bot.answer_callback_query(call.id,
                                  show_alert=True,
                                  text=cont.fwd_ab)

    elif call.data == 'src_about':
        con_db.set_val(que.new_log_q,
                       (call.message.chat.id,
                        '–°–ø—Ä–∞–≤–∫–∞: –≤–∫—Ä–∞—Ü–µ',
                        'pop-up message',
                        'NULL'))
        bot.answer_callback_query(call.id,
                                  show_alert=True,
                                  text=cont.src_ab)

    return


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –≤—ã—Ö–æ–¥–∞
@bot.message_handler(func=lambda message:
                     message.text in return_list,
                     content_types=['text'])
def common_return(message):

    if message.text == '‚Ü©Ô∏è –ö –Ω–∞—á–∞–ª—É':
        con_db.set_val(que.set_state_q,
                       (message.chat.id,
                        '–°—Ç–∞—Ä—Ç',
                        'return_to_prew',
                        message.text))
        bot.send_message(message.chat.id,
                         mod.act_state_msg(message),
                         reply_markup=keys.hidekey)
        bot.send_message(message.chat.id,
                         '‚Ü©Ô∏è',
                         reply_markup=keys.hidekey)
        start(message)

    elif message.text == '‚Ü©Ô∏è –ö –∫–∞—Ä—å–µ—Ä–µ':
        con_db.set_val(que.set_state_q,
                       (message.chat.id,
                        '–û –∫–∞—Ä—å–µ—Ä–µ',
                        'return_to_prew',
                        message.text))
        bot.send_message(message.chat.id,
                         '‚Ü©Ô∏è',
                         reply_markup=keys.career_m)

    elif message.text == '‚Ü©Ô∏è –ö –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã':
        con_db.set_val(que.set_state_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
                        'return_to_prew',
                        message.text))
        bot.send_message(message.chat.id,
                         '‚Ü©Ô∏è',
                         reply_markup=keys.exp_m)

    return


# –ú–ï–ù–Æ L2
#
# –û –∫–∞—Ä—å–µ—Ä–µ - –º–µ–Ω—é
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–û –∫–∞—Ä—å–µ—Ä–µ',
                     content_types=['text'])
def career_messages(message):

    # –í–∫—Ä–∞—Ü–µ - –º–µ–Ω—é
    if message.text == 'üë§ –í–∫—Ä–∞—Ü–µ':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–í–∫—Ä–∞—Ü–µ',
                        'ordinary',
                        message.text))
        bot.send_message(message.from_user.id,
                         cont.about_text,
                         reply_markup=keys.about_m)
        mod.cv_message_set(bot, message)
        bot.send_message(message.from_user.id,
                         cont.alarm_pin,
                         reply_markup=keys.src_alert_m)

    # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - –º–µ–Ω—é
    elif message.text == 'üóì –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã':
        con_db.set_val(que.set_state_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
                        'ordinary',
                        message.text))
        bot.send_message(message.from_user.id,
                         cont.exp_text,
                         reply_markup=keys.exp_m)

    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –º–µ–Ω—é
    elif message.text == 'üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ':
        con_db.set_val(que.set_state_q,
                       (message.chat.id,
                        '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                        'ordinary',
                        message.text))
        bot.send_sticker(message.chat.id,
                         cont.sticker_kpfu)
        bot.send_message(message.from_user.id,
                         cont.edu_text,
                         reply_markup=keys.edu_m)

    # Hardskills - –º–µ–Ω—é
    elif message.text == 'üë®üèª‚Äçüíª Hard Skills':
        con_db.set_val(que.set_state_q,
                       (message.chat.id,
                        'Hard Skills',
                        'ordinary',
                        message.text))
        bot.send_message(message.from_user.id,
                         cont.hs_text,
                         reply_markup=keys.hs_m)

    # –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã - –º–µ–Ω—é
    elif message.text in ['‚õîÔ∏è –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã', '‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏']:
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã',
                        'ordinary',
                        message.text))
        bot.send_message(message.from_user.id,
                         cont.weak_s_text,
                         reply_markup=keys.weak_s_m)

    # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã - –º–µ–Ω—é
    elif message.text in ['‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã', '‚úÖ –î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞']:
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã',
                        'ordinary',
                        message.text))
        bot.send_message(message.from_user.id,
                         cont.strong_s_text,
                         reply_markup=keys.strong_s_m)

    # –†–µ–∑—é–º–µ - –º–µ–Ω—é
    elif message.text == 'üìÑ –†–µ–∑—é–º–µ':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–†–µ–∑—é–º–µ',
                        'ordinary',
                        message.text))
        bot.send_message(message.from_user.id,
                         cont.cv_text,
                         reply_markup=keys.cv_m)
        bot.send_message(message.from_user.id,
                         cont.cv_text1,
                         reply_markup=keys.dyn_keys(['üìã HH.RU', mod.cv_hh]))
        bot.send_document(message.chat.id,
                          open(r'/root/CV_BOT/' + cont.cv_path, 'rb'))

    # –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ç—Ä–µ–∫ - –º–µ–Ω—é
    elif message.text == 'üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ç—Ä–µ–∫':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ç—Ä–µ–∫',
                        'ordinary',
                        message.text))
        bot.send_message(message.from_user.id,
                         cont.career_track_text,
                         reply_markup=keys.career_track_m)

    # –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç - –º–µ–Ω—é
    elif message.text == 'üé≤ –û —Å–µ–±–µ':
        con_db.set_val(que.set_state_q,
                       (message.chat.id,
                        '–û —Å–µ–±–µ',
                        'ordinary',
                        message.text))
        bot.send_message(message.from_user.id,
                         cont.rand_fact_text,
                         reply_markup=keys.r_fact_m2)

    return


# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - –º–µ–Ω—é
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–µ—Ä–µ—Å—ã–ª–∫–∞',
                     content_types=['text'])
def fwd_mesages(message):
    con_db.set_val(que.new_log_q,
                   (message.chat.id,
                    '–ü–µ—Ä–µ—Å—ã–ª–∫–∞',
                    'new_fwd_message',
                    message.text))
    bot.send_message(message.chat.id,
                     '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üëåüèª',
                     reply_markup=keys.fwd_alert_m)
    bot.forward_message(forward_to,
                        message.chat.id,
                        message.message_id)

    return


# –ú–ï–ù–Æ L3
#
# –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç - –ø–æ–¥–º–µ–Ω—é
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–û —Å–µ–±–µ',
                     content_types=['text'])
def r_fact_messages(message):

    if message.text == 'üîÑ –ù–∞—á–∞—Ç—å!':
        mod.upd_facts_func(message)
        mod.r_fact_func(bot, message)

    elif con_db.get_val(que.get_len_q,
                        (message.from_user.id,))[0] == 0:
        bot.send_message(message.from_user.id,
                         cont.facts_empty_text,
                         reply_markup=keys.r_fact_m1)

    elif message.text == 'üé≤ –§–∞–∫—Ç!':
        mod.r_fact_func(bot, message)

    return


# –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - –ø–æ–¥–º–µ–Ω—é
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
                     content_types=['text'])
def exp_messages(message):

    if message.text == 'üë®üèª‚Äçüéì –ö–§–£':
        con_db.set_val(que.set_state_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∫—Ñ—É',
                        'ordinary',
                        message.text))
        bot.send_sticker(message.chat.id,
                         cont.sticker_kpfu)
        bot.send_message(message.chat.id,
                         cont.kpfu_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üìö –ü–µ—Ä–≤—ã–π –æ–ø—ã—Ç':
        con_db.set_val(que.set_state_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.f_exp_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üéì –û–û–û "–ò–Ω–Ω–æ–≤–∞—Ü–∏—è"':
        con_db.set_val(que.set_state_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∏–Ω–Ω–æ–≤–∞—Ü–∏—è',
                        'ordinary',
                        message.text))
        bot.send_sticker(message.chat.id,
                         cont.sticker_99)
        bot.send_message(message.chat.id,
                         cont.innov_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üöö  –ê–ª—å—Ñ–∞—Å–∫–∞–Ω / Delko':
        con_db.set_val(que.set_state_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∞–ª—å—Ñ–∞/–¥–µ–ª–∫–æ',
                        'ordinary',
                        message.text))
        bot.send_sticker(message.chat.id,
                         cont.sticker_alpha)
        bot.send_message(message.chat.id,
                         cont.alpha_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'ü•© –ú–∏—Ä–∞—Ç–æ—Ä–≥':
        con_db.set_val(que.set_state_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –º–∏—Ä–∞—Ç–æ—Ä–≥',
                        'ordinary',
                        message.text))
        bot.send_sticker(message.chat.id,
                         cont.sticker_mira)
        bot.send_message(message.chat.id,
                         cont.mira_text,
                         reply_markup=keys.exp_l3_m)

    return


# –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –ø–æ–¥–º–µ–Ω—é
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                     content_types=['text'])
def edu_messages(message):

    if message.text == 'üìà –ö—É—Ä—Å—ã':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –∫—É—Ä—Å—ã',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.cours_text,
                         reply_markup=keys.edu_m1)

    return


# Hard Skills - –ø–æ–¥–º–µ–Ω—é
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == 'Hard Skills',
                     content_types=['text'])
def hs_messages(message):

    if message.text == 'üêç Python':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        'Hard Skills: python',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.hs_python_text,
                         reply_markup=keys.hs_m)

    elif message.text == 'üóÑ SQL':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        'Hard Skills: sql',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.hs_sql_text,
                         reply_markup=keys.hs_m)

    elif message.text == 'üßÆ Excel':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        'Hard Skills: excel',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.hs_excel_text,
                         reply_markup=keys.hs_m)

    elif message.text == 'üë®‚Äçüî¨ –ü—Ä–∏–∫–ª–∞–¥–Ω–æ–µ':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        'Hard Skills: –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π —Å–æ—Ñ—Ç',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.hs_special_text,
                         reply_markup=keys.hs_m)

    elif message.text == '‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        'Hard Skills: –ø—Ä–æ—Ü–µ—Å—Å—ã',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.hs_process_text,
                         reply_markup=keys.hs_m)

    elif message.text == 'üìä BI':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        'Hard Skills: bi',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.hs_bi_text,
                         reply_markup=keys.hs_m)

    return


# –ú–ï–ù–Æ L4
#
# –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç - –ø–æ–¥–º–µ–Ω—é
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∫—Ñ—É',
                     content_types=['text'])
def exp_kpfu_messages(message):

    if message.text == 'üìå –ó–∞–¥–∞—á–∏':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∫—Ñ—É - –∑–∞–¥–∞—á–∏',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.kpfu_resp_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∫—Ñ—É - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.kpfu_ach_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == '‚õîÔ∏è –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∫—Ñ—É - —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.kpfu_dism_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üëçüèª –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∫—Ñ—É - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.kpfu_rec_text,
                         reply_markup=keys.exp_l3_m)

    return


# –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç - –ø–æ–¥–º–µ–Ω—é
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç',
                     content_types=['text'])
def exp_f_exp_messages(message):

    if message.text == 'üìå –ó–∞–¥–∞—á–∏':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç - –∑–∞–¥–∞—á–∏',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.f_exp_resp_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.f_exp_ach_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == '‚õîÔ∏è –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç - —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.f_exp_dism_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üëçüèª –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.f_exp_rec_text,
                         reply_markup=keys.exp_l3_m)

    return


# –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - –ò–Ω–Ω–æ–≤–∞—Ü–∏—è - –ø–æ–¥–º–µ–Ω—é
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∏–Ω–Ω–æ–≤–∞—Ü–∏—è',
                     content_types=['text'])
def exp_innov_messages(message):

    if message.text == 'üìå –ó–∞–¥–∞—á–∏':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∏–Ω–Ω–æ–≤–∞—Ü–∏—è - –∑–∞–¥–∞—á–∏',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.innov_resp_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∏–Ω–Ω–æ–≤–∞—Ü–∏—è - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.innov_ach_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == '‚õîÔ∏è –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∏–Ω–Ω–æ–≤–∞—Ü–∏—è - —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.innov_dism_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üëçüèª –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∏–Ω–Ω–æ–≤–∞—Ü–∏—è - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.innov_rec_text,
                         reply_markup=keys.exp_l3_m)

    return


# –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - –ê–ª—å—Ñ–∞ - –ø–æ–¥–º–µ–Ω—é
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∞–ª—å—Ñ–∞/–¥–µ–ª–∫–æ',
                     content_types=['text'])
def exp_alpha_messages(message):

    if message.text == 'üìå –ó–∞–¥–∞—á–∏':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∞–ª—å—Ñ–∞/–¥–µ–ª–∫–æ - –∑–∞–¥–∞—á–∏',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.alpha_resp_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∞–ª—å—Ñ–∞/–¥–µ–ª–∫–æ - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.alpha_ach_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == '‚õîÔ∏è –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∞–ª—å—Ñ–∞/–¥–µ–ª–∫–æ - —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.alpha_dism_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üëçüèª –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –∞–ª—å—Ñ–∞/–¥–µ–ª–∫–æ - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.alpha_rec_text,
                         reply_markup=keys.exp_l3_m)

    return


# –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - –ú–∏—Ä–∞—Ç–æ—Ä–≥ - –ø–æ–¥–º–µ–Ω—é
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –º–∏—Ä–∞—Ç–æ—Ä–≥',
                     content_types=['text'])
def exp_mira_messages(message):

    if message.text == 'üìå –ó–∞–¥–∞—á–∏':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –º–∏—Ä–∞—Ç–æ—Ä–≥ - –∑–∞–¥–∞—á–∏',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.mira_resp_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –º–∏—Ä–∞—Ç–æ—Ä–≥ - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.mira_ach_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == '‚õîÔ∏è –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –º–∏—Ä–∞—Ç–æ—Ä–≥ - —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.mira_dism_text,
                         reply_markup=keys.exp_l3_m)

    elif message.text == 'üëçüèª –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        con_db.set_val(que.new_log_q,
                       (message.chat.id,
                        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –º–∏—Ä–∞—Ç–æ—Ä–≥ - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                        'ordinary',
                        message.text))
        bot.send_message(message.chat.id,
                         cont.mira_rec_text,
                         reply_markup=keys.exp_l3_m)

    return


# –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
bot.polling(none_stop=True)
